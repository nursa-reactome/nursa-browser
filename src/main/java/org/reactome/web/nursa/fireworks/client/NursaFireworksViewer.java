package org.reactome.web.nursa.fireworks.client;

import org.reactome.web.analysis.client.model.PathwayBase;
import org.reactome.web.analysis.client.model.SpeciesFilteredResult;
import org.reactome.web.fireworks.client.FireworksCanvas;
import org.reactome.web.fireworks.client.FireworksCanvas.CanvasNotSupportedException;
import org.reactome.web.fireworks.client.FireworksViewerImpl;
import org.reactome.web.fireworks.model.Graph;
import org.reactome.web.fireworks.model.Node;
import org.reactome.web.nursa.analysis.client.model.ComparisonExpressionSummary;
import org.reactome.web.nursa.analysis.client.model.PseudoResourceSummary;

public class NursaFireworksViewer extends FireworksViewerImpl {

    public NursaFireworksViewer(String json) {
        super(json);
    }

    @Override
    protected FireworksCanvas createCanvas(Graph graph)
            throws CanvasNotSupportedException {
        return new NursaFireworksCanvas(eventBus, graph);
    }

    @Override
    protected void filterResultBySpecies(String token, String resource) {
        // This is a no-op for results not generated by the standard
        // Reactome analysis server.
        if (!PseudoResourceSummary.RESOURCE.equals(resource)) {
            super.filterResultBySpecies(token, resource);
        }
    }

    @Override
    protected void setAnalysisResultData(SpeciesFilteredResult result) {
        super.setAnalysisResultData(result);
        // Override comparison analysis colors.
        if (result.getExpressionSummary() instanceof ComparisonExpressionSummary) {
            for (PathwayBase pathway : result.getPathways()) {
                Node node = data.getNode(pathway.getDbId());
                if (node == null) {
                    node = data.getNode(pathway.getStId());
                }
                if (node != null) {
                    String colour = ComparisonExpressionSummary.getColour(pathway);
                    node.setEnrichmentColour(colour);
                }
            }
        }
    }

}
